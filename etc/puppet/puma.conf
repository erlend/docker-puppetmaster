#!/usr/bin/env puma

directory '/etc/puppet'
environment 'production'
# pidfile '/var/run/puppet/puppetmaster_puma.pid'
bind 'unix:///var/run/puppet/puppetmaster_puma.sock'

workers ENV.fetch('PUPPET_WORKERS', 1)
threads ENV.fetch('PUPPET_MIN_THREADS', 0), ENV.fetch('PUPPET_MAX_THREADS', 16)

# Force-kill (via SIGKILL) any worker whose request/app.call/response
# cycle takes longer than this many seconds.
# This timeout is enforced by the master process itself and
# not subject to the scheduling limitations by the worker process.
worker_timeout 120

# Preload puppet master before forking worker processes.
# This allows memory savings when using a copy-on-write-friendly GC
# but can cause bad things to happen when resources like sockets
# are opened at load time by the puma master process and
# shared by multiple children.
preload_app!
if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = true
end
